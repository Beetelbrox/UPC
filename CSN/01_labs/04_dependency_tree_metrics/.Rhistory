n*log(2*pi) + n*log(devs[[i]][[j]]/n) + n + 2
}
})
})
}
# This pushes tables to the global context
generate_models_and_measures <- function (seqs, ensemble) {
nlms <<- generate_nlms(seqs=seqs, ensemble=ensemble)
deviances <<- calculate_deviances(seqs, nlms)
AICs <<- calculate_AICs(seqs, nlms, deviances)
}
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
###########################################################################################
# Reading the data from file
###########################################################################################
# Read the list of languages from file
filename_suffix <- "_dependency_tree_metrics.txt"
language_list <- as.vector(read.table("data/language_list.txt", header = FALSE)$V1)
# Push the in-degree sequences and theh list of entries to the global scope
dep_tree_cols <- c('n', 'k^2', 'd')
metric_seqs <- structure(lapply(language_list, function(x) data.frame(read.table(paste("data/", x, filename_suffix, sep=''), header = FALSE, col.names=dep_tree_cols))),
names=language_list)
avg_seqs <- lapply(metric_seqs, function(x) aggregate(x, list(x$n), mean))
###########################################################################################
# Generation of the testing sequences
###########################################################################################
# Hard-coded list of parameters and number of observations
test_params <- list(c(), c(b=0.5), c(a=0.8, b=0.5), c(a=0.8, c=0.01), c(a=0.8), c(b=0.5, e=2), c(a=0.8, b=0.5, e=2), c(a=0.8, c=0.01, e=2))
max_n_test <- 200
test_n <- 2:max_n_test
# Generate the functions with the provided parameters
test_functions <- lapply(1:length(test_params), function(i) do.call(model_ensemble[[i]]$f, as.list(test_params[[i]])))
# Generate the test sequences of length num_test_observations. To avoid issues with the optimizer we add some gaussian error
test_seqs <- lapply(test_functions, function(f) data.frame(
n=test_n,
d=sapply(sapply(test_n, function(i) f(i)) + rnorm(length(test_n), sd=0.02), function(x) x))) # The nls freaks out w/ values close to 0 so we force all values to be at least 1 (after all, the min distance is 1  )
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_k.2
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_d
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_k.2 & valid_d
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(metric_seqs, function(seq) seq[valid_k.2 & valid_d])
valid_d
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(language_list, function(lang) seq[valid_k.2 & valid_d])
mnetric_seq
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(language_list, function(lang) seq[valid_k.2 & valid_d])
metric_seq
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(language_list, function(lang) seq[valid_k.2 & valid_d])
metric_seqs
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
#lapply(language_list, function(lang) seq[valid_k.2 & valid_d])
metric_seqs[['Arabic']]
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) seq[[lang]][valid_k.2[[lang]] & valid_d[[lang]]])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) seq[[lang]]])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) seq[[lang]])
source('~/.active-rstudio-document', echo=TRUE)
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][valid_k.2[[lang]] & valid_d[[lang]] ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][valid_k.2[[lang]] & valid_d[[lang]], ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] & valid_d[[lang]]), ])
plot_grid(metric_seqs, language_list, '# vertices', 'mean dependency length')
View(metric_seqs)
View(metric_seqs[[1]])
###########################################################################################
# Reading the data from file
###########################################################################################
# Read the list of languages from file
filename_suffix <- "_dependency_tree_metrics.txt"
language_list <- as.vector(read.table("data/language_list.txt", header = FALSE)$V1)
# Push the in-degree sequences and theh list of entries to the global scope
dep_tree_cols <- c('n', 'k^2', 'd')
metric_seqs <- lapply(structure(lapply(language_list, function(x) data.frame(read.table(paste("data/", x, filename_suffix, sep=''), header = FALSE, col.names=dep_tree_cols))),
names=language_list), function(lang) lang[order(lang$n)],])
###########################################################################################
# Reading the data from file
###########################################################################################
# Read the list of languages from file
filename_suffix <- "_dependency_tree_metrics.txt"
language_list <- as.vector(read.table("data/language_list.txt", header = FALSE)$V1)
# Push the in-degree sequences and theh list of entries to the global scope
dep_tree_cols <- c('n', 'k^2', 'd')
metric_seqs <- lapply(structure(lapply(language_list, function(x) data.frame(read.table(paste("data/", x, filename_suffix, sep=''), header = FALSE, col.names=dep_tree_cols))),
names=language_list), function(lang) lang[order(lang$n),])
avg_seqs <- lapply(metric_seqs, function(x) aggregate(x, list(x$n), mean))
###########################################################################################
# Generation of the testing sequences
###########################################################################################
# Hard-coded list of parameters and number of observations
test_params <- list(c(), c(b=0.5), c(a=0.8, b=0.5), c(a=0.8, c=0.01), c(a=0.8), c(b=0.5, e=2), c(a=0.8, b=0.5, e=2), c(a=0.8, c=0.01, e=2))
max_n_test <- 200
test_n <- 2:max_n_test
# Generate the functions with the provided parameters
test_functions <- lapply(1:length(test_params), function(i) do.call(model_ensemble[[i]]$f, as.list(test_params[[i]])))
# Generate the test sequences of length num_test_observations. To avoid issues with the optimizer we add some gaussian error
test_seqs <- lapply(test_functions, function(f) data.frame(
n=test_n,
d=sapply(sapply(test_n, function(i) f(i)) + rnorm(length(test_n), sd=0.02), function(x) x))) # The nls freaks out w/ values close to 0 so we force all values to be at least 1 (after all, the min distance is 1  )
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] & valid_d[[lang]]), ])
View(metric_seqs[[1]])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_d[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x)  (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) )
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n-1))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_k.2[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n/2))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_d[[lang]] ), ])
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n/2))
lapply(language_list, function(lang) metric_seqs[[lang]][!(valid_d[[lang]] ), ])
summary_cols <- c('Language', '# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]]))
summary_df <- data.frame(do.call(rbind, lapply(metric_stats, function(x) c(x$N, x$mean_n, x$sd_n, x$mean_d, x$sd_d))), row.names=language_list)
summary_cols <- c('Language', '# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]])
summary_df <- data.frame(do.call(rbind, lapply(metric_stats, function(x) c(x$N, x$mean_n, x$sd_n, x$mean_d, x$sd_d))), row.names=language_list)
summary_cols <- c('Language', '# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]])))
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('Language', '# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]])))
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=invalid_cols)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]])))
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) list(
inv_k2=sum(!valid_k.2[[lang]]),
inv_d=sum(!valid_d[[lang]])))
print(invalid_rows)
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]]))
summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_rows
#summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
#kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
#  kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_rows[[1]]
#summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
#kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
#  kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_rows[[1]]
#summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
#kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
#  kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_rows
#summary_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
#kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
#  kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
#kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
#  kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c(
sum(!valid_k.2[[lang]]),
sum(!valid_d[[lang]])))
invalid_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(invalid_df, col.names=invalid_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c( sum(!valid_k.2[[lang]]), sum(!valid_d[[lang]]) ) )
invalid_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(invalid_df, col.names=invalid_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n/2))
lapply(language_list, function(lang) metric_seqs[[lang]][valid_k.2[[lang]]] )
lapply(language_list, function(lang) metric_seqs[[lang]][valid_k.2[[lang]],] )
lapply(language_list, function(lang) metric_seqs[[lang]][!valid_k.2[[lang]],] )
summary_cols <- c('N', 'mean_n', 'sd_n', 'mean_d', 'sd_d')
metric_stats <- lapply(metric_seqs, function(x) list(
N=length(x$n),
mean_n=mean(x$n),
sd_n=sd(x$n),
mean_d=mean(x$d),
sd_d=sd(x$d)))
summary_df <- data.frame(do.call(rbind, lapply(metric_stats, function(x) c(x$N, x$mean_n, x$sd_n, x$mean_d, x$sd_d))), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
metric_seqs <- lapply(language_list, function(lang) metric_seqs[[lang]][valid_k.2[[lang]] & valid_d[[lang]],] )
avg_seqs <- lapply(metric_seqs, function(x) aggregate(x, list(x$n), mean))
summary_cols <- c('N', 'mean_n', 'sd_n', 'mean_d', 'sd_d')
metric_stats <- lapply(metric_seqs, function(x) list(
N=length(x$n),
mean_n=mean(x$n),
sd_n=sd(x$n),
mean_d=mean(x$d),
sd_d=sd(x$d)))
summary_df <- data.frame(do.call(rbind, lapply(metric_stats, function(x) c(x$N, x$mean_n, x$sd_n, x$mean_d, x$sd_d))), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
knitr::opts_chunk$set(echo = TRUE)
# Load and install necessary packages
requiredPackages <- c("knitr", "rstudioapi", "kableExtra", "stats")
for (pac in requiredPackages) {
if(!require(pac,  character.only=TRUE)){
install.packages(pac, repos="http://cran.rstudio.com")
library(pac,  character.only=TRUE)
}
}
rm(pac)
rm(requiredPackages)
# set pwd to current directory, must load rstudioapi before. Need to check availability of API to avoid issues when knitting
if (rstudioapi::isAvailable()) setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Model Class definition
model <- setRefClass("model", fields=list(label="character", params="ANY", f="function", formula="ANY", log_formula="ANY", lower="ANY"))
# List of models. Each model is an object. f returns the model function given its parameters to be able to generate points
model_ensemble <- list(
model(label="0",
params=c(),
f=function() { function(n) n/3 + 1/3 },
formula=NA,
log_formula=NA),
model(label="1",
params=c('b'),
f=function(b) { function(n) (n/2)^b },
formula=d~(n/2)^b,
log_formula=function(d0) { log(d)~log(n/2) + 0 }),
model(label="2",
params=c('a', 'b'),
f=function(a, b) { function(n) a*n^b },
formula=d~a*n^b,
log_formula=function(d0) { log(d)~log(n) }),
model(label="3",
params=c('a','c'),
f=function(a, c) { function(n) a*exp(c*n) },
formula=d~a*exp(c*n),
log_formula=function(d0) { log(d)~n }),
model(label="4",
params=c('a'),
f=function(a) { function(n) a*log(n) },
formula=d~a*log(n),
log_formula=function(d0) { log(d)~1*log(log(n)) } ),
model(label="1+",
params=c('b', 'e'),
f=function(b, e) { function(n) (n/2)^b + e},
formula=d~(n/2)^b + e,
log_formula=function(d0) { log(d-d0)~log(n/2) + 0 }),
model(label="2+",
params=c('a', 'b', 'e'),
f=function(a, b, e) { function(n) a*n^b + e},
formula=d~a*n^b + e,
log_formula=function(d0) { log(d-d0)~log(n) }),
model(label="3+",
params=c('a','c', 'e'),
f=function(a, c, e) { function(n) a*exp(c*n) + e },
formula=d~a*exp(c*n) + e,
log_formula=function(d0) { log(d-d0)~n })
)
generate_nlms <- function(seqs, ensemble) {
lapply( seqs, function(seq) {         # Outer loop to iterate over the dependency sequences
d0 <- min(seq$d/2)
lapply(ensemble, function(model) {  # Inner loop to iterate over the models
if (length(model$params) > 0) {
lm <- lm(model$log_formula(d0), seq)
initial_values <- structure(lapply(1:length(model$params), function(i)
if (model$params[i] == "a") exp(coef(lm)[[i]]) else if (model$params[i] == "e") d0 else coef(lm)[[i]] ), names=model$params)
nls( formula=model$formula, data=seq, start=initial_values, control=nls.control(maxiter=1000, warnOnly = TRUE), trace=FALSE)
} else NA
})
})
}
calculate_deviances <- function(seqs, models) {
lapply (1:length(seqs), function(i) {
sapply(1:length(models[[i]]), function(j) {
if (!is.na(models[[i]][j])) { deviance(models[[i]][[j]]) }
else { sum( (seqs[[i]]$d - (seqs[[i]]$n+1)/3)^2) }
})
})
}
calculate_AICs <- function(seqs, models, devs) {
lapply (1:length(seqs), function(i) {
sapply(1:length(models[[i]]), function(j) {
if (!is.na(models[[i]][j])) { AIC(models[[i]][[j]]) }
else {
n <- length(seqs[[i]]$n)
n*log(2*pi) + n*log(devs[[i]][[j]]/n) + n + 2
}
})
})
}
# This pushes tables to the global context
generate_models_and_measures <- function (seqs, ensemble) {
nlms <<- generate_nlms(seqs=seqs, ensemble=ensemble)
deviances <<- calculate_deviances(seqs, nlms)
AICs <<- calculate_AICs(seqs, nlms, deviances)
}
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
###########################################################################################
# Reading the data from file
###########################################################################################
# Read the list of languages from file
filename_suffix <- "_dependency_tree_metrics.txt"
language_list <- as.vector(read.table("data/language_list.txt", header = FALSE)$V1)
# Push the in-degree sequences and theh list of entries to the global scope
dep_tree_cols <- c('n', 'k^2', 'd')
metric_seqs_raw <- lapply(structure(lapply(language_list, function(x) data.frame(read.table(paste("data/", x, filename_suffix, sep=''), header = FALSE, col.names=dep_tree_cols))),
names=language_list), function(lang) lang[order(lang$n),])
###########################################################################################
# Generation of the testing sequences
###########################################################################################
# Hard-coded list of parameters and number of observations
test_params <- list(c(), c(b=0.5), c(a=0.8, b=0.5), c(a=0.8, c=0.01), c(a=0.8), c(b=0.5, e=2), c(a=0.8, b=0.5, e=2), c(a=0.8, c=0.01, e=2))
max_n_test <- 200
test_n <- 2:max_n_test
# Generate the functions with the provided parameters
test_functions <- lapply(1:length(test_params), function(i) do.call(model_ensemble[[i]]$f, as.list(test_params[[i]])))
# Generate the test sequences of length num_test_observations. To avoid issues with the optimizer we add some gaussian error
test_seqs <- lapply(test_functions, function(f) data.frame(
n=test_n,
d=sapply(sapply(test_n, function(i) f(i)) + rnorm(length(test_n), sd=0.02), function(x) x))) # The nls freaks out w/ values close to 0 so we force all values to be at least 1 (after all, the min distance is 1  )
valid_k.2 <- lapply(metric_seqs, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_k.2 <- lapply(metric_seqs_raw, function(x) (4-(6/x$n) <= x$k.2) & (x$k.2 <= x$n-1))
valid_d <- lapply(metric_seqs_raw, function(x) (x$k.2*x$n/(8*(x$n-1)) + 1/2 <= x$d) & (x$d <= x$n/2))
invalid_cols <- c('# invalid rows k^2', '# invalid rows d')
invalid_rows <- lapply(language_list, function(lang) c( sum(!valid_k.2[[lang]]), sum(!valid_d[[lang]]) ) )
invalid_df <- data.frame(do.call(rbind, invalid_rows), row.names=language_list)
kable(invalid_df, col.names=invalid_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
metric_seqs <- lapply(language_list, function(lang) metric_seqs_raw[[lang]][valid_k.2[[lang]] & valid_d[[lang]],] )
avg_seqs <- lapply(metric_seqs, function(x) aggregate(x, list(x$n), mean))
summary_cols <- c('N', 'mean_n', 'sd_n', 'mean_d', 'sd_d')
metric_stats <- lapply(metric_seqs, function(x) list(
N=length(x$n),
mean_n=mean(x$n),
sd_n=sd(x$n),
mean_d=mean(x$d),
sd_d=sd(x$d)))
summary_df <- data.frame(do.call(rbind, lapply(metric_stats, function(x) c(x$N, x$mean_n, x$sd_n, x$mean_d, x$sd_d))), row.names=language_list)
kable(summary_df, col.names=summary_cols, booktabs=T, linesep='', align='c', digits=4) %>%
kable_styling(latex_options="striped", full_width=F)
boxplot(metric_seqs)
boxplot(metric_seqs[[1]]$n)
boxplot(lapply(metric_seqs, function(seq) seq$n)
boxplot(lapply(metric_seqs, function(seq) seq$n))
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list))
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list))
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list))
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list))
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list), ylab='# nodes')
boxplot(structure(lapply(metric_seqs, function(seq) seq$d), names=language_list), ylab='# nodes')
boxplot(structure(lapply(metric_seqs, function(seq) seq$d), names=language_list), ylab='mean dependency length')
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list), ylab='# nodes', main='Number of nodes boxplot')
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list), ylab='# nodes', main='Number of nodes)
boxplot(structure(lapply(metric_seqs, function(seq) seq$n), names=language_list), ylab='# nodes', main='Number of nodes')
boxplot(structure(lapply(metric_seqs, function(seq) seq$d), names=language_list), ylab='mean dependency length', main='Mean Dependency length (d)')
# Load and install necessary packages
requiredPackages <- c("knitr", "rstudioapi", "kableExtra", "stats")
for (pac in requiredPackages) {
if(!require(pac,  character.only=TRUE)){
install.packages(pac, repos="http://cran.rstudio.com")
library(pac,  character.only=TRUE)
}
}
rm(pac)
rm(requiredPackages)
# set pwd to current directory, must load rstudioapi before. Need to check availability of API to avoid issues when knitting
if (rstudioapi::isAvailable()) setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d/metric_stats[[i]]$sd) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance')
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) sd( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance')
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) sd( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) sd( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d+1) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d+1) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d+10) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) 1+var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance', log=TRUE)
# Careful, this contains
var_seqs <- lapply(1:length(metric_seqs), function(i) data.frame(n=avg_seqs[[i]]$n, d=sapply(avg_seqs[[i]]$n, function(x) var( metric_seqs[[i]][metric_seqs[[i]]$n == x,]$d) ) ))
plot_grid(var_seqs, language_list, '# vertices', 'mean dependency length variance')
