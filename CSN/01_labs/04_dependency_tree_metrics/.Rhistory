# Single structure to store the whole ensemble so we can move it around easily
model_ensemble <- lapply(1:5, function(i) lapply(list(
# List of model labels
"label"=c("0", "1", "2", "3", "4" ),
# Model parameters list
"params"=list(
c(),          # Model 0
c('b'),       # Model 1
c('a', 'b'),  # Model 2
c('a','c'),   # Model 3
c('a')        # Model 4
),
# Model function generator lists
"function"=c(
function() {     function(n) n/3 + 1/3 },   # Model 0
function(b) {    function(n) (n/2)^b },     # Model 1
function(a, b) { function(n) a*n^b },       # Model 2
function(a, c) { function(n) a*exp(c*n) },  # Model 3
function(a) {    function(n) a*log(n) }     # Model 4
),
# Model formulas list
"formula"=c(
NA,                     # Model 0
d~(n/2)^b,              # Model 1
d~a*n^b,                # Model 2
d~a*exp(c*n),           # Model 3
d~a*log(n)              # Model 4
),
# Log transform of the model formulas list
"log_formula"=c (
NA,                    # Model 0
log(d)~log(n/2) + 0,   # Model 1
log(d)~log(n),         # Model 2
log(d)~n,              # Model 3
log(d)~1*log(log(n))   # Model 4
)
), "[[", i))  # Transpose the list so we can have one model per row
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
model_ensemble[[1]]
# Single structure to store the whole ensemble so we can move it around easily
model_ensemble <- lapply(1:5, function(i) lapply(list(
# List of model labels
"label"=c("0", "1", "2", "3", "4" ),
# Model parameters list
"params"=list(
c(),          # Model 0
c('b'),       # Model 1
c('a', 'b'),  # Model 2
c('a','c'),   # Model 3
c('a')        # Model 4
),
# Model function generator lists
"f"=c(
function() {     function(n) n/3 + 1/3 },   # Model 0
function(b) {    function(n) (n/2)^b },     # Model 1
function(a, b) { function(n) a*n^b },       # Model 2
function(a, c) { function(n) a*exp(c*n) },  # Model 3
function(a) {    function(n) a*log(n) }     # Model 4
),
# Model formulas list
"formula"=c(
NA,                     # Model 0
d~(n/2)^b,              # Model 1
d~a*n^b,                # Model 2
d~a*exp(c*n),           # Model 3
d~a*log(n)              # Model 4
),
# Log transform of the model formulas list
"log_formula"=c (
NA,                    # Model 0
log(d)~log(n/2) + 0,   # Model 1
log(d)~log(n),         # Model 2
log(d)~n,              # Model 3
log(d)~1*log(log(n))   # Model 4
)
), "[[", i))  # Transpose the list so we can have one model per row
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
model_ensemble[[1]]
# Single structure to store the whole ensemble so we can move it around easily
model_ensemble <- lapply(1:5, function(i) lapply(list(
# List of model labels
"label"=c("0", "1", "2", "3", "4" ),
# Model parameters list
"params"=list(
c(),          # Model 0
c('b'),       # Model 1
c('a', 'b'),  # Model 2
c('a','c'),   # Model 3
c('a')        # Model 4
),
# Model function generator lists
"f"=c(
function() {     function(n) n/3 + 1/3 },   # Model 0
function(b) {    function(n) (n/2)^b },     # Model 1
function(a, b) { function(n) a*n^b },       # Model 2
function(a, c) { function(n) a*exp(c*n) },  # Model 3
function(a) {    function(n) a*log(n) }     # Model 4
),
# Model formulas list
"formula"=c(
NA,                     # Model 0
d~(n/2)^b,              # Model 1
d~a*n^b,                # Model 2
d~a*exp(c*n),           # Model 3
d~a*log(n)              # Model 4
),
# Log transform of the model formulas list
"log_formula"=c (
NA,                    # Model 0
log(d)~log(n/2) + 0,   # Model 1
log(d)~log(n),         # Model 2
log(d)~n,              # Model 3
log(d)~1*log(log(n))   # Model 4
)
), "[[", i))  # Transpose the list so we can have one model per row
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
model_ensemble[[2]]
# Single structure to store the whole ensemble so we can move it around easily
model_ensemble <- lapply(1:5, function(i) lapply(list(
# List of model labels
"label"=c("0", "1", "2", "3", "4" ),
# Model parameters list
"params"=list(
c(),          # Model 0
c('b'),       # Model 1
c('a', 'b'),  # Model 2
c('a','c'),   # Model 3
c('a')        # Model 4
),
# Model function generator lists
"f"=c(
function() {     function(n) n/3 + 1/3 },   # Model 0
function(b) {    function(n) (n/2)^b },     # Model 1
function(a, b) { function(n) a*n^b },       # Model 2
function(a, c) { function(n) a*exp(c*n) },  # Model 3
function(a) {    function(n) a*log(n) }     # Model 4
),
# Model formulas list
"formula"=c(
NA,                     # Model 0
d~(n/2)^b,              # Model 1
d~a*n^b,                # Model 2
d~a*exp(c*n),           # Model 3
d~a*log(n)              # Model 4
),
# Log transform of the model formulas list
"log_formula"=c (
NA,                    # Model 0
log(d)~log(n/2) + 0,   # Model 1
log(d)~log(n),         # Model 2
log(d)~n,              # Model 3
log(d)~1*log(log(n))   # Model 4
)
), "[[", i))  # Transpose the list so we can have one model per row
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
model_ensemble[[3]]
# Single structure to store the whole ensemble so we can move it around easily
model_ensemble <- lapply(1:5, function(i) lapply(list(
# List of model labels
"label"=c("0", "1", "2", "3", "4" ),
# Model parameters list
"params"=list(
c(),          # Model 0
c('b'),       # Model 1
c('a', 'b'),  # Model 2
c('a','c'),   # Model 3
c('a')        # Model 4
),
# Model function generator lists
"f"=c(
function() {     function(n) n/3 + 1/3 },   # Model 0
function(b) {    function(n) (n/2)^b },     # Model 1
function(a, b) { function(n) a*n^b },       # Model 2
function(a, c) { function(n) a*exp(c*n) },  # Model 3
function(a) {    function(n) a*log(n) }     # Model 4
),
# Model formulas list
"formula"=c(
NA,                     # Model 0
d~(n/2)^b,              # Model 1
d~a*n^b,                # Model 2
d~a*exp(c*n),           # Model 3
d~a*log(n)              # Model 4
),
# Log transform of the model formulas list
"log_formula"=c (
NA,                    # Model 0
log(d)~log(n/2) + 0,   # Model 1
log(d)~log(n),         # Model 2
log(d)~n,              # Model 3
log(d)~1*log(log(n))   # Model 4
)
), "[[", i))  # Transpose the list so we can have one model per row
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
lapply(language_list, function(lang) {
lapply(model_ensemble)
})
lapply(language_list, function(lang) {
lapply(model_ensemble, function(x) x)
})
nl_models <- lapply( dep_tree_metric_seqs, function(seq) {
# Inner loop 1 to iterate over the formulas
lapply(model_ensemble, function(model) {
if (length(model$params) > 0) {
}
})
})
nl_models <- lapply( metric_seqs, function(seq) {
# Inner loop 1 to iterate over the formulas
lapply(model_ensemble, function(model) {
if (length(model$params) > 0) {
}
})
})
nl_models <- lapply( metric_seqs, function(seq) {
# Inner loop 1 to iterate over the formulas
lapply(model_ensemble, function(model) {
if (length(model$params) > 0) {
} else NA
})
})
nl_models <- lapply( metric_seqs, function(seq) {
# Inner loop 1 to iterate over the formulas
lapply(model_ensemble, function(model) {
if (length(model$params) > 0) {
} else NA
})
})
nl_models
model <- setRefClass("model")
model <- setRefClass("model")
model
model <- setRefClass("model", fields=list("lablel", "params", "f", "formula", "log_formula"))
model <- setRefClass("model", fields=list(label="character", params="list", f="function", formula="formula", log_formula="formula"))
model
model <- setRefClass("model", fields=list(label="character", params="character", f="function", formula="formula", log_formula="formula"))
typeof(c("a", "b"))
model_ensemble <- list(
model(label="0", params=c(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=NA, f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=c(NA), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=list, f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model <- setRefClass("model", fields=list(label="list", params="character", f="function", formula="formula", log_formula="formula"))
model_ensemble <- list(
model(label="0", params=c(NA), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=list(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model <- setRefClass("model", fields=list(label="character", params="list", f="function", formula="formula", log_formula="formula"))
model_ensemble <- list(
model(label="0", params=c(NA), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=list(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model <- setRefClass("model", fields=list(label="character", params="list", f="function", formula, log_formula))
model <- setRefClass("model", fields=list(label="character", params="ANY", f="function", formula="ANY", log_formula="ANY"))
model_ensemble <- list(
model(label="0", params=c(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA)
)
model_ensemble <- list(
model(label="0", params=c(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=og(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() function(n) n/3 + 1/3, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() function(n) n/3 + 1/3, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() {function(n) n/3 + 1/3}, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() {function(n) n/3 + 1/3}, formula=NA, log_formula=NA),
#model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
#model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
#model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
#model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() {function(n) n/3 + 1/3}, formula=NA, log_formula=NA)
#model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
#model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
#model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
#model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n))),
)
model_ensemble <- list(
model(label="0", params=c(), f=function() { function(n) n/3 + 1/3 }, formula=NA, log_formula=NA),
model(label="1", params=c('b'), f=function(b) { function(n) (n/2)^b }, formula=d~(n/2)^b, log_formula=log(d)~log(n/2) + 0),
model(label="2", params=c('a', 'b'), f=function(a, b) { function(n) a*n^b }, formula=d~a*n^b, log_formula=log(d)~log(n)),
model(label="3", params=c('a','c'), f=function(a, c) { function(n) a*exp(c*n) }, formula=d~a*exp(c*n), log_formula=log(d)~n),
model(label="4", params=c('a'), f=function(a) { function(n) a*log(n) }, formula=d~a*log(n), log_formula=log(d)~1*log(log(n)))
)
model_ensemble <- list(
model(label="0",
params=c(),
f=function() { function(n) n/3 + 1/3 },
formula=NA,
log_formula=NA),
model(label="1",
params=c('b'),
f=function(b) { function(n) (n/2)^b },
formula=d~(n/2)^b,
log_formula=log(d)~log(n/2) + 0),
model(label="2",
params=c('a', 'b'),
f=function(a, b) { function(n) a*n^b },
formula=d~a*n^b,
log_formula=log(d)~log(n)),
model(label="3",
params=c('a','c'),
f=function(a, c) { function(n) a*exp(c*n) },
formula=d~a*exp(c*n),
log_formula=log(d)~n),
model(label="4",
params=c('a'),
f=function(a) { function(n) a*log(n) },
formula=d~a*log(n),
log_formula=log(d)~1*log(log(n)))
)
knitr::opts_chunk$set(echo = TRUE)
# Load and install necessary packages
requiredPackages <- c("knitr", "rstudioapi", "kableExtra", "stats")
for (pac in requiredPackages) {
if(!require(pac,  character.only=TRUE)){
install.packages(pac, repos="http://cran.rstudio.com")
library(pac,  character.only=TRUE)
}
}
rm(pac)
rm(requiredPackages)
# set pwd to current directory, must load rstudioapi before. Need to check availability of API to avoid issues when knitting
if (rstudioapi::isAvailable()) setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Model Class definition
model <- setRefClass("model", fields=list(label="character", params="ANY", f="function", formula="ANY", log_formula="ANY"))
# List of models
model_ensemble <- list(
model(label="0",
params=c(),
f=function() { function(n) n/3 + 1/3 },
formula=NA,
log_formula=NA),
model(label="1",
params=c('b'),
f=function(b) { function(n) (n/2)^b },
formula=d~(n/2)^b,
log_formula=log(d)~log(n/2) + 0),
model(label="2",
params=c('a', 'b'),
f=function(a, b) { function(n) a*n^b },
formula=d~a*n^b,
log_formula=log(d)~log(n)),
model(label="3",
params=c('a','c'),
f=function(a, c) { function(n) a*exp(c*n) },
formula=d~a*exp(c*n),
log_formula=log(d)~n),
model(label="4",
params=c('a'),
f=function(a) { function(n) a*log(n) },
formula=d~a*log(n),
log_formula=log(d)~1*log(log(n)))
)
plot_grid <- function(data, labels, xlab, ylab, color="blue", lines=list(), line_colors=c(), log=FALSE) {
old.par <- par(mfrow=c(ceiling(length(data)/3), 3))
par(mar=c(4,4,2,2))
for (i in 1:length(data)) {
plot(x=data[[i]]$n,
y=data[[i]]$d,
main=labels[[i]],
log= if(log) "xy" else '',
xlab=xlab,
ylab=ylab,
col=color)
for (j in seq_along(lines)) {
lines(x=lines[[j]][[i]]$n,
y=lines[[j]][[i]]$d,
col=line_colors[[j]])
}
}
}
# Read the list of languages from file
filename_suffix <- "_dependency_tree_metrics.txt"
language_list <- as.vector(read.table("data/language_list.txt", header = FALSE)$V1)
# Push the in-degree sequences and theh list of entries to the global scope
dep_tree_cols <- c('n', 'k^2', 'd')
metric_seqs <- structure(lapply(language_list, function(x) data.frame(read.table(paste("data/", x, filename_suffix, sep=''), header = FALSE, col.names=dep_tree_cols))),
names=language_list)
avg_seqs <- lapply(metric_seqs, function(x) aggregate(x, list(x$n), mean))
nl_models <- lapply( metric_seqs, function(seq) {
# Inner loop 1 to iterate over the formulas
lapply(model_ensemble, function(model) {
if (length(model$params) > 0) {
} else NA
})
})
